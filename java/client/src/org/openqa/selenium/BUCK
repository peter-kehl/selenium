# BUILD FILE SYNTAX: SKYLARK
load("//:selenium-version.bzl", "SE_VERSION")

build_stamp(name = 'build-stamp',
  kind = 'manifest',
  source_control_system = 'git',
)

java_library(name = 'selenium',
  exported_deps = [
    ':beta',
    ':core',
    ':exceptions',
    ':platform',
    ':primitives',
    '//java/client/src/org/openqa/selenium/interactions:interactions',
    '//java/client/src/org/openqa/selenium/io:io',
    '//java/client/src/org/openqa/selenium/logging:api',
    '//java/client/src/org/openqa/selenium/logging:logging',
    '//java/client/src/org/openqa/selenium/net:net',
    '//java/client/src/org/openqa/selenium/os:os',
    '//java/client/src/org/openqa/selenium/security:security',
  ],
  visibility = ['PUBLIC'],
)

export_file(
  name = 'template-pom',
  src = 'pom.xml',
  out = 'pom.xml',
  visibility = ['PUBLIC'],
)

java_library(name = 'core',
  maven_coords = 'org.seleniumhq.selenium:selenium-api:' + SE_VERSION,
  maven_pom_template = ':template-pom',
  srcs = [
    'Alert.java',
    'By.java',
    'Capabilities.java',
    'Cookie.java',
    'ContextAware.java',
    'HasCapabilities.java',
    'JavascriptExecutor.java',
    'DeviceRotation.java',
    'Keys.java',
    'ImmutableCapabilities.java',
    'MutableCapabilities.java',
    'OutputType.java',
    'PageLoadStrategy.java',
    'Proxy.java',
    'Rotatable.java',
    'ScreenOrientation.java',
    'SearchContext.java',
    'TakesScreenshot.java',
    'UnexpectedAlertBehaviour.java',
    'WebDriver.java',
    'WebElement.java',
    'internal/ElementScrollBehavior.java',
    'internal/HasIdentity.java',
    'internal/Locatable.java',
    'internal/Lock.java',
    'internal/SocketLock.java',
    'internal/WrapsDriver.java',
    'internal/WrapsElement.java',
  ] + glob([
     'html5/*.java',
     'internal/FindsBy*.java',
     'mobile/*.java',
  ]),
  manifest_file = ':manifest',
  exported_deps = [
    # This list of dependencies MUST NOT include anything other than code
    # from the selenium project. That means no guava and no gson.
    ':beta',
    ':exceptions',
    ':platform',
    ':primitives',
    '//java/client/src/org/openqa/selenium/interactions:core',
    '//java/client/src/org/openqa/selenium/interactions:exceptions',
    '//java/client/src/org/openqa/selenium/logging:api',
    '//java/client/src/org/openqa/selenium/security:security',
  ],
  visibility = [
    'PUBLIC',
  ],
)

genrule(name = 'manifest',
  out = 'manifest.mf',
  bash = "cp $(location :build-stamp) $OUT && printf 'Selenium-Version: {}\n\n' >> $OUT".format(SE_VERSION),
  cmd_exe = "copy $(location :build-stamp) %OUT% && (echo Selenium-Version: {}\n\n) >> %OUT%".format(SE_VERSION),
)

java_library(name = 'beta',
  srcs = [ 'Beta.java' ],
  visibility = [
    '//java/client/src/org/openqa/selenium/interactions:interactions',
    '//java/client/src/org/openqa/selenium/logging:api',
    '//java/client/src/org/openqa/selenium/logging:logging',
    '//java/client/src/org/openqa/selenium/os:os',
    '//java/client/src/org/openqa/selenium/security:security',
  ],
)

java_library(name = 'exceptions',
  srcs = [
    'ElementClickInterceptedException.java',
    'ElementNotInteractableException.java',
    'ElementNotSelectableException.java',
    'ElementNotVisibleException.java',
    'ImeActivationFailedException.java',
    'ImeNotAvailableException.java',
    'InvalidArgumentException.java',
    'InvalidCookieDomainException.java',
    'InvalidElementStateException.java',
    'InvalidSelectorException.java',
    'JavascriptException.java',
    'NoAlertPresentException.java',
    'NoSuchCookieException.java',
    'NoSuchElementException.java',
    'NoSuchFrameException.java',
    'NoSuchSessionException.java',
    'NoSuchWindowException.java',
    'NotFoundException.java',
    'SessionNotCreatedException.java',
    'ScriptTimeoutException.java',
    'StaleElementReferenceException.java',
    'TimeoutException.java',
    'UnableToSetCookieException.java',
    'UnhandledAlertException.java',
    'UnsupportedCommandException.java',
    'WebDriverException.java',
    'internal/BuildInfo.java',
  ],
  deps = [
    ':beta',
  ],
  visibility = [
    '//java/client/src/org/openqa/selenium/interactions:exceptions',
    '//java/client/src/org/openqa/selenium/interactions:interactions',
    '//java/client/src/org/openqa/selenium/io:io',
    '//java/client/src/org/openqa/selenium/logging:logging',
    '//java/client/src/org/openqa/selenium/net:net',
    '//java/client/src/org/openqa/selenium/os:os',
    '//java/client/test/org/openqa/selenium/testing:helpers',
  ],
)

java_library(
  name = 'platform',
  srcs = [
    'Architecture.java',
    'Platform.java',
  ],
  deps = [
    ':exceptions',
  ],
  visibility = [
    '//java/client/src/org/openqa/selenium/io:io',
    '//java/client/src/org/openqa/selenium/net:net',
    '//java/client/src/org/openqa/selenium/os:os',
  ],
)

java_library(name = 'primitives',
  srcs = [
    'Dimension.java',
    'Point.java',
    'Rectangle.java',
  ],
  visibility = [
    '//java/client/src/org/openqa/selenium/interactions:core',
  ],
)

java_library(
  name = 'client-combined',
  maven_coords = 'org.seleniumhq.selenium:selenium-java:' + SE_VERSION,
  maven_pom_template = ':template-pom',
  exported_deps = [
    ':selenium',
    '//java/client/src/org/openqa/selenium/chrome:chrome',
    '//java/client/src/org/openqa/selenium/firefox:firefox',
    '//java/client/src/org/openqa/selenium/edge:edge',
    '//java/client/src/org/openqa/selenium/ie:ie',
    '//java/client/src/org/openqa/selenium/opera:opera',
    '//java/client/src/org/openqa/selenium/remote:remote',
    '//java/client/src/org/openqa/selenium/safari:safari',
    '//java/client/src/org/openqa/selenium/support:support'
  ],
  visibility = [
    '//java/server/src/org/openqa/grid/selenium:classes',
    '//java/server/test/org/openqa/selenium:lib',
  ],
)


# This isn't very elegant, but we can build a dist zip like this:
zip_file(
  name = 'client-combined-zip',
  out = 'selenium-java-' + SE_VERSION + '.zip',
  srcs = [
    ':client-combined-' + SE_VERSION,
    ':client-combined-source-zip',
    ':client-libs',
    '//java:changelog',
    '//:notice',
    '//:license',
  ],
)

# The jar file containing merged first party code
java_binary(
  name = 'client-combined-' + SE_VERSION,
  blacklist = [
    '^(?!com.thoughtworks.selenium.*|org.openqa.selenium.*|org.openqa.grid.*)',
  ],
  deps = [
    ':client-combined',
  ],
)

# The first party source, as a source jar which we don't want merged
genrule(
  name = 'client-combined-sources',
  out = 'client-combined-' + SE_VERSION + '-sources.jar',
  cmd = 'mkdir temp && echo $(query_paths "inputs(kind(java_library, deps(//java/client/src/org/openqa/selenium:client-combined)))") | xargs $(exe //java/client/src/org/openqa/selenium/tools:package) $OUT',
)

# So we hide it in another zip file, which will be merged. Zip file merging isn't recursive.
zip_file(
  name = 'client-combined-source-zip',
  out = 'selenium-java-sources.jar',
  merge_source_zips = False,
  srcs = [
    ':client-combined-sources'
  ],
)

# The third party libraries we depend on, as a source jar for merging
genrule(
  name = 'client-libs',
  out = 'libs-sources.jar',
  cmd = 'mkdir libs && echo $(classpath :client-combined) | tr : "\\n" | grep third_party/java | grep .jar | xargs -J % cp % libs && jar cMf $OUT libs/*',
)

