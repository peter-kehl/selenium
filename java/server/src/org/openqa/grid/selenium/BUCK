# BUILD FILE SYNTAX: SKYLARK
load("//:selenium-version.bzl", "SE_VERSION")

# Force a rebuild every time we're parsed.

java_binary(name = 'selenium',
  main_class = 'org.openqa.grid.selenium.GridLauncherV3',
  manifest_file = ':manifest',
  merge_manifests = True,
  deps = [
    ':classes',
  ],
  visibility = [
    '//java/client/test/org/openqa/selenium/testing/drivers:drivers',
  ]
)

genrule(name = 'manifest',
  out = 'build-info.mf',
  cmd = "$(exe :generate-build-info) %s > $OUT" % (SE_VERSION),
)

python_binary(name = 'generate-build-info',
  main = 'generate-build-info.py',
)

java_library(name = 'classes',
  maven_coords = 'org.seleniumhq.selenium:selenium-server:' + SE_VERSION,
  maven_pom_template = '//java/client/src/org/openqa/selenium:template-pom',
  srcs = glob(['**/*.java']),
  deps = [
    '//java/client/src/org/openqa/selenium:selenium',
    '//java/client/src/org/openqa/selenium:client-combined',
    '//java/server/src/org/openqa/grid:grid',
    '//java/server/src/org/openqa/selenium/remote/server/log:log',
    '//java/server/src/org/openqa/selenium/remote/server:standalone-server-lib',
    '//java/server/src/org/openqa/selenium/remote/server:server',
    '//third_party/java/gson:gson',
    '//third_party/java/guava:guava',
    '//third_party/java/servlet:servlet-api',
    '//third_party/java/beust:jcommander',
  ],
  visibility = [
    '//java/server/test/org/openqa/grid/e2e:tests',
  ],
)

# This isn't very elegant, but we can build a dist zip like this:
zip_file(
  name = 'selenium-zip',
  out = 'selenium-server-' + SE_VERSION + '.zip',
  srcs = [
    ':selenium-' + SE_VERSION + '-nodeps',
    ':selenium-server-source-zip',
    ':server-libs',
    '//java:changelog',
    '//:notice',
    '//:license',
  ],
)

# The jar file containing merged first party code
java_binary(
  name = 'selenium-' + SE_VERSION + '-nodeps',
  blacklist = [
    '^(?!com.thoughtworks.selenium.*|org.openqa.selenium.*|org.openqa.grid.*)',
  ],
  deps = [
    ':selenium',
  ],
)

# The first party source, as a source jar which we don't want merged
genrule(
  name = 'selenium-server-sources',
  out = 'selenium-' + SE_VERSION + '-nodeps-sources.jar',
  cmd = 'mkdir temp && echo $(query_paths "inputs(kind(java_library, deps(:selenium)))") | xargs $(exe //java/client/src/org/openqa/selenium/tools:package) $OUT',
)

# So we hide it in another zip file, which will be merged. Zip file merging isn't recursive.
zip_file(
  name = 'selenium-server-source-zip',
  out = 'selenium-server-sources.jar',
  merge_source_zips = False,
  srcs = [
    ':selenium-server-sources'
  ],
)

# The third party libraries we depend on, as a source jar for merging
genrule(
  name = 'server-libs',
  out = 'server-libs-sources.jar',
  cmd = 'mkdir libs && echo $(classpath :selenium) | tr : "\\n" | grep third_party/java | grep .jar | xargs -J % cp % libs && jar cMf $OUT libs/*',
)
